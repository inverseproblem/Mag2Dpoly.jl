var documenterSearchIndex = {"docs":
[{"location":"#Contents","page":"Home","title":"Contents","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"index.md\"]\nDepth = 4","category":"page"},{"location":"#User-guide","page":"Home","title":"User guide","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Mag2Dpoly is a Julia package conceived for forward magnetic anomaly calculation due to two-dimensional polygonal bodies with uniform arbitrary polarization. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"The formulations implemented in this package are that of Talwani & Heirtzler (1962, 1964), Won & Bevis (1987) and revised Kravchinsky et al. (2019).","category":"page"},{"location":"","page":"Home","title":"Home","text":"If you use this code for research or else, please cite the related paper:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Alessandro Ghirotto, Andrea Zunino, Egidio Armadillo & Klaus Mosegaard (2021). Magnetic Anomalies Caused by 2D Polygonal Structures with Uniform Arbitrary Polarization: new insights from analytical/numerical comparison among available algorithm formulations. Geophysical Research Letters, 48(7), e2020GL091732.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The specific procedures for each formulation, the analytical/numerical results derived from their comparison and the rectification made to Kravchinsky et al. (2019) algorithm are describde in detail in the paper above.","category":"page"},{"location":"#Documentation","page":"Home","title":"Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Author = \"Andrea Zunino\"\nAuthor = \"Alessandro Ghirotto\"","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To install the package simple enter into the package manager mode in Julia by typing \"]\" at the  REPL prompt and then use add, i.e.,","category":"page"},{"location":"","page":"Home","title":"Home","text":"(v1.5) pkg> add Mag2Dpoly","category":"page"},{"location":"","page":"Home","title":"Home","text":"The package will be automatically downloaded from the web and installed.","category":"page"},{"location":"","page":"Home","title":"Home","text":"warning: Warning\nAt the moment the package is not yet registered in the official Julia registry, so,  to install it run the following in package mode:(v1.5) pkg> add https://github.com/inverseproblem/Mag2Dpoly.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"Alternatively, use the path where the directory of the package is located, be it local or remote (Github):","category":"page"},{"location":"","page":"Home","title":"Home","text":"(v1.5) pkg> add /path/to/Mag2Dpoly.jl","category":"page"},{"location":"#Theoretical-Background","page":"Home","title":"Theoretical Background","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"For a theoretical explanation, let us consider a three-dimensional non-magnetic  space in which a body infinitely extended in the y direction is immersed. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"The common aim of all formulations is the calculation of the magnetic field of  this body upon an observation point (x_0z_0) located along a profile aligned to  the x direction (the positive z axis is assumed pointing downward).","category":"page"},{"location":"","page":"Home","title":"Home","text":"The starting assumption is that our body can be considered as discretized by an  infinite number of uniformly-magnetized elementary volumes with infinitesimal dimensions dx, dy, dz.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Within this assumption, the magnetic field associated to the body can be mathematically  expressed in terms of a line integral around its periphery, represented in two dimensions  as its polygonal cross-section (in red). (Image: )","category":"page"},{"location":"#Tutorial","page":"Home","title":"Tutorial","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"First load the module and define some magnetization vectors,","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Mag2Dpoly \n\n# induced magnetization\nJind = MagnetizVector(mod=4.9,Ideg=90.0,Ddeg=45.0)\n# remanent magnetization\nJrem = MagnetizVector(mod=3.1,Ideg=45.0,Ddeg=0.0)\nnothing # hide","category":"page"},{"location":"","page":"Home","title":"Home","text":"and then define some observation points ","category":"page"},{"location":"","page":"Home","title":"Home","text":"# angle with the North axis\nnorthxax = 90.0\n\n# number of observatoin \nN=101\nxzobs = hcat(LinRange(0.0,100.0,N), -1.0*ones(N))\nnothing # hide","category":"page"},{"location":"","page":"Home","title":"Home","text":"Finally the general list of vertices of the poligonal bodies and the relative indices mapping each body to its vertices:","category":"page"},{"location":"","page":"Home","title":"Home","text":"# vertices of the poligonal bodies\nvertices  = [35.0 50.0;\n             65.0 50.0;\n             80.0 35.0;\n             65.0 20.0;\n             35.0 20.0;\n             20.0 35.0]\n\t\t\t \n# indices of vertices for the body\nind1 = collect(1:6)\nbodyindices = [ind1]\n# construct the poligonal body object\npbody = MagPolygBodies2D(bodyindices,vertices)","category":"page"},{"location":"","page":"Home","title":"Home","text":"At this point the total field can be computed. We select \"talwani\" as the forward type:","category":"page"},{"location":"","page":"Home","title":"Home","text":"# type of forward algorithm\nforwardtype = \"talwani\"\n# arrays of magnetization vectors\nJinds = [Jind]\nJrems = [Jrem]\n# compute total field \ntmag = tmagpolybodies2Dgen(xzobs,Jinds,Jrems,northxax,pbody,forwardtype)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Now we can plot the results:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using PyPlot\nxmi=minimum(xzobs[:,1]) \nxma=maximum(xzobs[:,1])\nfigure()\nsubplot(211)\nplot(xzobs[:,1],tmag,\".-\") \nxlim(xmi,xma)\nsubplot(212)\nx = [pbody.bo[1].ver1[:,1]...,pbody.bo[1].ver2[end,1]]\ny = [pbody.bo[1].ver1[:,2]...,pbody.bo[1].ver2[end,2]]\nplot(x,y,\"o-\")\nxlim(xmi,xma)\ngca().invert_yaxis()","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: )","category":"page"},{"location":"#Public-API","page":"Home","title":"Public API","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Mag2Dpoly","category":"page"},{"location":"#Mag2Dpoly","page":"Home","title":"Mag2Dpoly","text":"Mag2Dpoly\n\nA module to perform magnetic anomaly calculations for 2D polygonal bodies.\n\nExports\n\nBodySegments2D\nMagPolygBodies2D\nMagnetizVector\ntmagpoly2D\ntmagpoly2Dgen\ntmagpolybodies2D\ntmagpolybodies2Dgen\n\n\n\n\n\n","category":"module"},{"location":"#Data-structures","page":"Home","title":"Data structures","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"BodySegments2D","category":"page"},{"location":"#Mag2Dpoly.BodySegments2D","page":"Home","title":"Mag2Dpoly.BodySegments2D","text":"struct BodySegments2D\n\nStructure containing the segments of a polygonal body. To create an instance a set of indices have to be passed on.\n\nFields\n\nver1::SubArray\n(x,y) for first set of vertices (beginning of segments)\nver2::SubArray\n(x,y) for second set of vertices (end of segments)\nnsegm::Integer\ntotal number of segments\n\n\n\n\n\n","category":"type"},{"location":"","page":"Home","title":"Home","text":"warning: Warning\nVertices of the polygonal bodies must be provided  counterclockwise to the function BodySegments2D to perform magnetic anomaly calculation using the functions in the next section Forward functions","category":"page"},{"location":"","page":"Home","title":"Home","text":"MagPolygBodies2D\nMagnetizVector","category":"page"},{"location":"#Mag2Dpoly.MagPolygBodies2D","page":"Home","title":"Mag2Dpoly.MagPolygBodies2D","text":"struct MagPolygBodies2D\n\nStructure containing a set of polygonal bodies described by their segments and all vertices. To create an instance, input an array of vectors of indices    (of vertices) for each body and the array of all the vertices.\n\nFields\n\nbo::Array{BodySegments2D,1}\narray of bodies defined by their vertices\nallvert::Array{var\"#s14\",2} where var\"#s14\"<:Real\narray of all vertices for all bodies\n\n\n\n\n\n","category":"type"},{"location":"#Mag2Dpoly.MagnetizVector","page":"Home","title":"Mag2Dpoly.MagnetizVector","text":"struct MagnetizVector\n\nStructure containing the components of a magnetization vector,    i.e., module, inclination and declination angles.\n\nFields\n\nmod::Real\nmodulus\nIdeg::Real\ninclination in degrees\nDdeg::Real\ndeclination in degrees\n\n\n\n\n\n","category":"type"},{"location":"#Forward-functions","page":"Home","title":"Forward functions","text":"","category":"section"},{"location":"#Single-polygonal-body","page":"Home","title":"Single polygonal body","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"tmagpolybodies2D\ntmagpolybodies2Dgen","category":"page"},{"location":"#Mag2Dpoly.tmagpolybodies2D","page":"Home","title":"Mag2Dpoly.tmagpolybodies2D","text":"tmagpolybodies2D(xzobs::Array{var\"#s16\",2} where var\"#s16\"<:Real, Jinds::Array{MagnetizVector,1}, Jrems::Array{MagnetizVector,1}, northxax::Real, bodies::MagPolygBodies2D) -> Array{_A,1} where _A\n\n\nTotal magnetic field (2D) for a set of polygonal bodies defined by their corners. Takes into account both induced and remnant magnetization.  Based on Talwani & Heitzler (1964), the default algorithm in Mag2Dpoly package. \n\n\n\n\n\n","category":"function"},{"location":"#Mag2Dpoly.tmagpolybodies2Dgen","page":"Home","title":"Mag2Dpoly.tmagpolybodies2Dgen","text":"tmagpolybodies2Dgen(xzobs::Array{var\"#s16\",2} where var\"#s16\"<:Real, Jinds::Array{MagnetizVector,1}, Jrems::Array{MagnetizVector,1}, northxax::Real, bodies::MagPolygBodies2D, forwardtype::String) -> Array{_A,1} where _A\n\n\nTotal magnetic field (2D) for a set of polygonal bodies defined by their corners. Takes into account both induced and remnant magnetization. Generic version containing four different algorithm formulations forwardtype, passed as a string:\n\n\"talwani\"      –> Talwani & Heitzler (1964)\n\"talwani_red\"  –> Talwani & Heitzler (1964) rederived from Kravchinsky et al. 2019\n\"krav\"         –> Kravchinsky et al. (2019) rectified by Ghirotto et al. (2020)\n\"wonbev\"       –> Won & Bevis (1987)\n\n\n\n\n\n","category":"function"},{"location":"#Multiple-polygonal-bodies","page":"Home","title":"Multiple polygonal bodies","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"tmagpoly2D\ntmagpoly2Dgen","category":"page"},{"location":"#Mag2Dpoly.tmagpoly2D","page":"Home","title":"Mag2Dpoly.tmagpoly2D","text":"tmagpoly2D(xzobs::Array{var\"#s23\",2} where var\"#s23\"<:Real, Jind::MagnetizVector, Jrem::MagnetizVector, northxax::Real, body::BodySegments2D) -> Array{_A,1} where _A\n\n\nTotal magnetic field (2D) for a polygon defined by its corners. Takes into account both induced and remnant magnetization.  Based on Talwani & Heitzler (1964), the default algorithm in Mag2Dpoly package. \n\n\n\n\n\n","category":"function"},{"location":"#Mag2Dpoly.tmagpoly2Dgen","page":"Home","title":"Mag2Dpoly.tmagpoly2Dgen","text":"tmagpoly2Dgen(xzobs::Array{var\"#s13\",2} where var\"#s13\"<:Real, Jind::MagnetizVector, Jrem::MagnetizVector, northxax::Real, body::BodySegments2D, forwardtype::String) -> Array{_A,1} where _A\n\n\nTotal magnetic field (2D) for a polygon defined by its corners. Takes into account both induced and remnant magnetization. Generic version containing four different algorithm formulations forwardtype, passed as a string:\n\n\"talwani\"      –> Talwani & Heitzler (1964)\n\"talwani_red\"  –> Talwani & Heitzler (1964) rederived from Kravchinsky et al. 2019\n\"krav\"         –> Kravchinsky et al. (2019) rectified by Ghirotto et al. (2020)\n\"wonbev\"       –> Won & Bevis (1987)\n\n\n\n\n\n","category":"function"},{"location":"#Forward-algorithms-alone","page":"Home","title":"Forward algorithms alone","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"note: Note\nThese functions are not exported. To call them  type Mag2Dpoly. before the name of the functions.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Mag2Dpoly.tmagtalwani\nMag2Dpoly.tmagtalwanired\nMag2Dpoly.tmagkrav\nMag2Dpoly.tmagwonbev","category":"page"},{"location":"#Mag2Dpoly.tmagtalwani","page":"Home","title":"Mag2Dpoly.tmagtalwani","text":"tmagtalwani(x1::Real, z1::Real, x2::Real, z2::Real, Jx::Real, Jz::Real, Iind::Real, Dind::Real, C::Real) -> Any\n\n\nTotal magnetic field (2D) for a line segment. Formulas from Talwani & Heitzler (1964).\n\n\n\n\n\n","category":"function"},{"location":"#Mag2Dpoly.tmagtalwanired","page":"Home","title":"Mag2Dpoly.tmagtalwanired","text":"tmagtalwanired(x1::Real, z1::Real, x2::Real, z2::Real, Jx::Real, Jz::Real, Iind::Real, Dind::Real, C::Real) -> Any\n\n\nTotal magnetic field (2D) for a ribbon. Talwani & Heitzler (1964) modified by Kravchinsky et al. (2019).\n\n\n\n\n\n","category":"function"},{"location":"#Mag2Dpoly.tmagkrav","page":"Home","title":"Mag2Dpoly.tmagkrav","text":"tmagkrav(x1::Real, z1::Real, x2::Real, z2::Real, Jtotx::Real, Jtotz::Real, Iind::Real, Dind::Real, Cnorth::Real) -> Any\n\n\nTotal magnetic field (2D) for a line segment. Formulas from Kravchinsky et al (2019) rectified by Ghirotto et al. (2021). \n\n\n\n\n\n","category":"function"},{"location":"#Mag2Dpoly.tmagwonbev","page":"Home","title":"Mag2Dpoly.tmagwonbev","text":"tmagwonbev(x1::Real, z1::Real, x2::Real, z2::Real, modJind::Real, modJrem::Real, Iind::Real, Dind::Real, Irem::Real, Drem::Real, C::Real) -> Any\n\n\nTotal magnetic field (2D) for a line segment. Formulas from Won & Bevis (1987).\n\n\n\n\n\n","category":"function"},{"location":"#Useful-functions","page":"Home","title":"Useful functions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"note: Note\nThese functions are not exported. To call them type Mag2Dpoly. before the name of the functions.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Mag2Dpoly.convert_H_to_B_nT\nMag2Dpoly.convert_B_nT_to_H\nMag2Dpoly.magcomp\nMag2Dpoly.checkanticlockwiseorder","category":"page"},{"location":"#Mag2Dpoly.convert_H_to_B_nT","page":"Home","title":"Mag2Dpoly.convert_H_to_B_nT","text":"convert_H_to_B_nT(H_Am::Real) -> Any\n\n\nConvert from the field H (A/m) to B (nT).\n\n\n\n\n\n","category":"function"},{"location":"#Mag2Dpoly.convert_B_nT_to_H","page":"Home","title":"Mag2Dpoly.convert_B_nT_to_H","text":"convert_B_nT_to_H(B_nT::Real) -> Any\n\n\nConvert from the field B (nT) to H (A/m).\n\n\n\n\n\n","category":"function"},{"location":"#Mag2Dpoly.magcomp","page":"Home","title":"Mag2Dpoly.magcomp","text":"magcomp(modJind::Real, Iind::Real, Dind::Real, modJrem::Real, Irem::Real, Drem::Real, C::Real) -> Tuple{Any,Any,Any}\n\n\nVector addition of magnetic (remnant + induced) components.\n\n\n\n\n\n","category":"function"},{"location":"#Mag2Dpoly.checkanticlockwiseorder","page":"Home","title":"Mag2Dpoly.checkanticlockwiseorder","text":"checkanticlockwiseorder(body::BodySegments2D) -> Bool\n\n\nCheck whether the polygonal body has segments ordered anticlockwise.\n\n\n\n\n\n","category":"function"}]
}
